import unittest
import ast
from engine.ast_parser import *

class TestASTParser(unittest.TestCase):
    def setUp(self):
        """
        Set up common variables and resources needed for tests.
        """
        self.valid_code = "x = 10\ny = 20\nz = 30\nprint(x)\nprint(z)"
        self.invalid_code = "x = 10\nprint(x"  # missing parenthesis
        self.parser = ASTParser(self.valid_code)

    def test_parse_ast_valid_code(self):
        """
        Test the parse_ast method with valid Python code.
        
        Checks that the parse_ast method of Class ASTParser returns a ast.AST tree and valid code doesn't raise an error.
        
        Assertions:
            - The returned tree is an instance of ast.AST
        """
        parser = self.parser
        tree = parser.parse_ast(self.valid_code)
        self.assertIsInstance(tree, ast.AST)
        
    def test_parse_ast_invalid_code_raises_syntaxerror(self):
        """
        Test the parse_ast method with invalid Python code.
        
        Checks that syntactically incorrect code raises a SyntaxError
        
        Assertions:
            - The parse_ast method raises a SyntaxError
        """
        with self.assertRaises(SyntaxError):
            self.parser.parse_ast(self.invalid_code)
            

    def test_get_node_source(self):
        """
        Test the `get_node_source` method of the parser.
        
        This test verifies that the `get_node_source` method correctly retrieves
        the source code of a given AST node. Specifically, it checks that the
        assignment "x = 10" is returned accurately.
        
        Assertions:
            - The source code of the first node should be "x = 10".
        """
        parser = self.parser
        tree = parser.tree
        node = tree.body[0]  # x = 10
        
        source = parser.get_node_source(node)
        
        self.assertEqual(source, "x = 10")
    
    def test_get_source(self):
        """
        Test the `get_source` method of the parser.

        This test checks if the source code regenerated by the parser matches the 
        expected valid code.

        Assertions:
            - The regenerated code is the same as the original valid code.
        """
        regenerated_code = self.parser.get_source()        
        self.assertEqual(regenerated_code.strip(), self.valid_code.strip())
        
    def test_remove_node(self):
        """
        Test the `remove_nod`e method of the parser.
        
        This test verifies that the `remove_node` method correctly removes a specified node from the AST (Abstract Syntax Tree).
        
        Assertions:
            - The regenerated code is the same as the valid code
            - y = 20 is removed from the original code.
        """
        # Arrange
        parser = self.parser
        tree = parser.tree
        node = tree.body[1] # y = 20
        # Act
        parser.remove_node(node)
        modified_tree = parser.tree
        modified_code = ast.unparse(modified_tree)
        # Assert
        expected_code = "x = 10\nz = 30\nprint(x)\nprint(z)"
        self.assertEqual(expected_code, modified_code)
        
    def test_find_assignments(self):
            """
            Test the `find_assignments` method of the parser.

            This test verifies that the `find_assignments` method correctly identifies
            all direct variable assignments in the AST.

            Assertions:
                - The assignments dictionary should contain the correct variable names as keys.
                - The corresponding values should be instances of ast.Assign.
            """
            parser = self.parser
            assignments = parser.find_assignments()

            expected_assignments = {"x", "y", "z"}
            self.assertEqual(set(assignments.keys()), expected_assignments)
            for node in assignments.values():
                self.assertIsInstance(node, ast.Assign)
    
    def test_find_used_variables(self):
            """
            Test the `find_used_variables` method of the parser.

            This test verifies that the `find_used_variables` method correctly identifies
            all variables that are used in the AST.

            Assertions:
                - The set of used variables should contain the correct variable names.
            """
            parser = self.parser
            used_vars = parser.find_used_variables()

            expected_used_vars = {"x", "z"}
            self.assertEqual(used_vars, expected_used_vars)

    # def test_visualise_ast(self):
    #     # Optional manual test
    #     sample_code = "x = 10\nprint(x)"
    #     tree = parse_ast(sample_code)
    #     self.assertIsNotNone(tree)
    #     try:
    #         visualise_ast(tree)
    #     except Exception as e:
    #         self.fail(f"visualise_ast raised an exception: {e}")

if __name__ == "__main__":
    unittest.main()